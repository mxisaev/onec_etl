#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ | –≤ prop_key —Ç–∞–±–ª–∏—Ü—ã product_properties
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
current_dir = Path(__file__).parent
project_root = current_dir.parent.parent
sys.path.append(str(project_root))

from database.client import DatabaseClient
from utils.logger import setup_logger

logger = setup_logger()

def fix_pipe_symbols():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–º–≤–æ–ª—ã | –≤ prop_key —Ç–∞–±–ª–∏—Ü—ã product_properties"""
    try:
        logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ | –≤ prop_key...")
        
        db_client = DatabaseClient()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Å–∏–º–≤–æ–ª–æ–º | –≤ prop_key
        select_query = """
        SELECT id, product_id, prop_key, prop_value
        FROM product_properties 
        WHERE prop_key LIKE '|%'
        """
        
        records_with_pipe = db_client.execute_query(select_query, fetch_all=True)
        
        if not records_with_pipe:
            logger.info("‚úÖ –°–∏–º–≤–æ–ª—ã | –≤ prop_key –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(records_with_pipe)} –∑–∞–ø–∏—Å–µ–π —Å —Å–∏–º–≤–æ–ª–æ–º | –≤ prop_key")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        for i, record in enumerate(records_with_pipe[:5]):
            logger.info(f"   –ü—Ä–∏–º–µ—Ä {i+1}: '{record['prop_key']}' -> '{record['prop_key'].replace('|', '').strip()}'")
        
        if len(records_with_pipe) > 5:
            logger.info(f"   ... –∏ –µ—â–µ {len(records_with_pipe) - 5} –∑–∞–ø–∏—Å–µ–π")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        response = input(f"\n–ò—Å–ø—Ä–∞–≤–∏—Ç—å {len(records_with_pipe)} –∑–∞–ø–∏—Å–µ–π? (y/N): ")
        if response.lower() != 'y':
            logger.info("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
        fixed_count = 0
        for record in records_with_pipe:
            old_key = record['prop_key']
            new_key = old_key.replace('|', '').strip()
            
            if old_key != new_key:
                # –û–±–Ω–æ–≤–ª—è–µ–º prop_key
                update_query = """
                UPDATE product_properties 
                SET prop_key = %s, updated_at = CURRENT_TIMESTAMP
                WHERE id = %s
                """
                
                rows_updated = db_client.execute_query(update_query, (new_key, record['id']))
                if rows_updated > 0:
                    fixed_count += 1
                    logger.debug(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: '{old_key}' -> '{new_key}'")
        
        db_client.commit()
        
        logger.success(f"üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {fixed_count} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        remaining_query = """
        SELECT COUNT(*) as count
        FROM product_properties 
        WHERE prop_key LIKE '|%'
        """
        
        remaining = db_client.execute_query(remaining_query, fetch_one=True)['count']
        logger.info(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π —Å —Å–∏–º–≤–æ–ª–æ–º |: {remaining}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ |: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = fix_pipe_symbols()
        if success:
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ | –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ | –Ω–µ —É–¥–∞–ª–æ—Å—å")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

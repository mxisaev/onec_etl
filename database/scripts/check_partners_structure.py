#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã partners –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ETL –ø—Ä–æ—Ü–µ—Å—Å–∞
"""

import sys
import json
from pathlib import Path
from loguru import logger
import psycopg2
from psycopg2.extras import RealDictCursor

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent.parent))

def get_postgres_connection():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL —á–µ—Ä–µ–∑ Airflow Variables"""
    try:
        from airflow.models import Variable
        postgres_config = json.loads(Variable.get('postgres_connection'))
        conn = psycopg2.connect(
            host=postgres_config['host'],
            port=postgres_config['port'],
            database=postgres_config['database'],
            user=postgres_config['user'],
            password=postgres_config['password']
        )
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        raise

def check_partners_table():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã partners"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã partners...")
    
    conn = get_postgres_connection()
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' AND table_name = 'partners'
                )
            """)
            table_exists = cursor.fetchone()['exists']
            
            if not table_exists:
                logger.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ partners –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return False
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ partners —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_schema = 'public' AND table_name = 'partners'
                ORDER BY ordinal_position
            """)
            
            columns = cursor.fetchall()
            logger.info(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã partners ({len(columns)} –∫–æ–ª–æ–Ω–æ–∫):")
            
            for col in columns:
                nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
                default = f" DEFAULT {col['column_default']}" if col['column_default'] else ""
                logger.info(f"  - {col['column_name']}: {col['data_type']} {nullable}{default}")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False
    finally:
        conn.close()

def check_suppliers_view():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å VIEW suppliers_view"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º VIEW suppliers_view...")
    
    conn = get_postgres_connection()
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ VIEW
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.views 
                    WHERE table_schema = 'public' AND table_name = 'suppliers_view'
                )
            """)
            view_exists = cursor.fetchone()['exists']
            
            if not view_exists:
                logger.error("‚ùå VIEW suppliers_view –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return False
            
            logger.info("‚úÖ VIEW suppliers_view —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ VIEW
            cursor.execute("SELECT COUNT(*) as count FROM suppliers_view")
            count = cursor.fetchone()['count']
            logger.info(f"üìä –í suppliers_view –∑–∞–ø–∏—Å–µ–π: {count}")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ VIEW: {e}")
        return False
    finally:
        conn.close()

def test_dax_query():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å DAX –∑–∞–ø—Ä–æ—Å –∏–∑ Airflow Variables"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º DAX –∑–∞–ø—Ä–æ—Å...")
    
    try:
        from airflow.models import Variable
        
        # –ü–æ–ª—É—á–∞–µ–º DAX –∑–∞–ø—Ä–æ—Å
        dax_queries = Variable.get("dax_queries", deserialize_json=True)
        if 'partners' not in dax_queries:
            logger.error("‚ùå DAX –∑–∞–ø—Ä–æ—Å –¥–ª—è partners –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Airflow Variables")
            return False
        
        query_config = dax_queries['partners']
        logger.info(f"‚úÖ DAX –∑–∞–ø—Ä–æ—Å –Ω–∞–π–¥–µ–Ω: {query_config['description']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞
        datasets = Variable.get("datasets", deserialize_json=True)
        if 'partners' not in datasets:
            logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞ partners –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        dataset_config = datasets['partners']
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {dataset_config}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ DAX: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã partners...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    if not check_partners_table():
        logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã partners –Ω–µ –ø—Ä–æ—à–ª–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º VIEW
    if not check_suppliers_view():
        logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ VIEW suppliers_view –Ω–µ –ø—Ä–æ—à–ª–∞")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º DAX
    if not test_dax_query():
        logger.error("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DAX –Ω–µ –ø—Ä–æ—à–ª–æ")
        return
    
    logger.success("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ partners –≥–æ—Ç–æ–≤–∞ –∫ ETL –ø—Ä–æ—Ü–µ—Å—Å—É")

if __name__ == "__main__":
    main()

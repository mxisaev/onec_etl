#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Power BI –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è PostgreSQL —Ç–∞–±–ª–∏—Ü—ã
"""

import requests
import sys
import os
import subprocess
import json
import psycopg2
from psycopg2.extras import RealDictCursor

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Airflow
sys.path.append('/opt/airflow')

from airflow.models import Variable
from oneC_etl.utils.dax_utils import get_business_columns_from_dax

def get_access_token():
    tenant_id = Variable.get('powerbi_tenant_id')
    client_id = Variable.get('powerbi_client_id')
    client_secret = Variable.get('powerbi_client_secret')
    token_url = f'https://login.microsoftonline.com/{tenant_id}/oauth2/token'
    token_data = {
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret,
        'resource': 'https://analysis.windows.net/powerbi/api'
    }
    resp = requests.post(token_url, data=token_data)
    resp.raise_for_status()
    return resp.json()['access_token']

def get_powerbi_columns():
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ Power BI —á–µ—Ä–µ–∑ DAX-–∑–∞–ø—Ä–æ—Å –∏–∑ Airflow Variable"""
    print("=== –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ Power BI (—á–µ—Ä–µ–∑ DAX –∏–∑ Airflow Variable) ===")
    try:
        access_token = get_access_token()
        workspace_id = Variable.get('powerbi_workspace_id')
        dataset_id = '022e7796-b30f-44d4-b076-15331e612d47'  # ID –¥–∞—Ç–∞—Å–µ—Ç–∞
        dax_queries = json.loads(Variable.get('dax_queries'))
        query = dax_queries['company_products']['query']
        print(f"DAX-–∑–∞–ø—Ä–æ—Å –∏–∑ Airflow Variable:\n{query}\n")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∫–æ–ª–æ–Ω–æ–∫
        powerbi_columns = get_business_columns_from_dax(query)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(powerbi_columns)} –±–∏–∑–Ω–µ—Å-–∫–æ–ª–æ–Ω–æ–∫ –≤ Power BI:")
        for i, col in enumerate(powerbi_columns, 1):
            print(f"  {i}. {col}")
        return powerbi_columns
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ Power BI: {e}")
        return []

def get_postgres_connection():
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ Airflow Variable
        postgres_config = json.loads(Variable.get('postgres_connection'))
        
        conn = psycopg2.connect(
            host=postgres_config['host'],
            port=postgres_config['port'],
            database=postgres_config['database'],
            user=postgres_config['user'],
            password=postgres_config['password']
        )
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return None

def get_table_structure(conn, table_name='companyproducts'):
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã PostgreSQL"""
    print(f"\n=== –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã {table_name} –≤ PostgreSQL ===")
    
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = %s
                );
            """, (table_name,))
            
            table_exists = cursor.fetchone()['exists']
            
            if not table_exists:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                SELECT 
                    column_name,
                    data_type,
                    is_nullable,
                    column_default
                FROM information_schema.columns 
                WHERE table_schema = 'public' 
                AND table_name = %s
                ORDER BY ordinal_position;
            """, (table_name,))
            
            columns = cursor.fetchall()
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(columns)} –∫–æ–ª–æ–Ω–æ–∫ –≤ PostgreSQL:")
            for i, col in enumerate(columns, 1):
                nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
                default = f" DEFAULT {col['column_default']}" if col['column_default'] else ""
                print(f"  {i}. {col['column_name']} ({col['data_type']}) {nullable}{default}")
            
            return columns
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return []

def normalize_column_name(powerbi_col):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ Power BI –¥–ª—è PostgreSQL"""
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
    if '[' in powerbi_col and ']' in powerbi_col:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ 'Table[Column]'
        col_name = powerbi_col.split('[')[1].split(']')[0]
    else:
        col_name = powerbi_col
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    normalized = col_name.lower().replace(' ', '_').replace('-', '_')
    
    # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    normalized = ''.join(c for c in normalized if c.isalnum() or c == '_')
    
    return normalized

SPECIAL_COLUMNS = {
    'upload_timestamp': 'TIMESTAMP',
    'is_vector': 'BOOLEAN',
    'updated_at': 'TIMESTAMP',
    'vector': 'BYTEA',
}

def analyze_differences(powerbi_columns, postgres_columns):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏ Power BI –∏ PostgreSQL"""
    print(f"\n=== –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π ===")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ Power BI
    normalized_powerbi = {normalize_column_name(col): col for col in powerbi_columns}
    postgres_col_names = [col['column_name'] for col in postgres_columns]
    
    # –ö–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å (Power BI + —Å–ø–µ—Ü-–∫–æ–ª–æ–Ω–∫–∏)
    columns_to_add = []
    for norm_name, original_name in normalized_powerbi.items():
        if norm_name not in postgres_col_names:
            columns_to_add.append((norm_name, original_name, 'TEXT'))
    for special_col, special_type in SPECIAL_COLUMNS.items():
        if special_col not in postgres_col_names:
            columns_to_add.append((special_col, special_col, special_type))
    
    # –ö–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å–ø–µ—Ü-–∫–æ–ª–æ–Ω–∫–∞ –∏ –Ω–µ –∏–∑ Power BI)
    columns_to_remove = []
    for col in postgres_columns:
        if col['column_name'] not in normalized_powerbi.keys() and col['column_name'] not in SPECIAL_COLUMNS:
            columns_to_remove.append(col['column_name'])
    
    print(f"üìà –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(columns_to_add)}")
    for norm_name, original_name, col_type in columns_to_add:
        print(f"  + {norm_name} (–∏–∑ {original_name}) —Ç–∏–ø {col_type}")
    print(f"üìâ –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(columns_to_remove)}")
    for col_name in columns_to_remove:
        print(f"  - {col_name}")
    return columns_to_add, columns_to_remove

def apply_fixes(conn, table_name, columns_to_add, columns_to_remove):
    """–ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ"""
    print(f"\n=== –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ===")
    
    try:
        with conn.cursor() as cursor:
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            for col_name in columns_to_remove:
                print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É: {col_name}")
                cursor.execute(f"ALTER TABLE {table_name} DROP COLUMN IF EXISTS {col_name};")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            for norm_name, original_name, col_type in columns_to_add:
                print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É: {norm_name} (–∏–∑ {original_name}) —Ç–∏–ø {col_type}")
                cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN IF NOT EXISTS {norm_name} {col_type};")
            
            conn.commit()
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        conn.rollback()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö Power BI ‚Üí PostgreSQL")
    print("=" * 60)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ Power BI
    powerbi_columns = get_powerbi_columns()
    if not powerbi_columns:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ Power BI")
        return
    
    # 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
    conn = get_postgres_connection()
    if not conn:
        return
    
    try:
        # 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É PostgreSQL —Ç–∞–±–ª–∏—Ü—ã
        postgres_columns = get_table_structure(conn, table_name='companyproducts')
        if not postgres_columns:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã PostgreSQL")
            return
        
        # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è
        columns_to_add, columns_to_remove = analyze_differences(powerbi_columns, postgres_columns)
        
        if not columns_to_add and not columns_to_remove:
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω—ã–º Power BI –∏ —Å–ø–µ—Ü-–∫–æ–ª–æ–Ω–∫–∞–º!")
            return
        
        # 5. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"\nü§î –ù–∞–π–¥–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã.")
        response = input("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è? (y/N): ").strip().lower()
        
        if response in ['y', 'yes', '–¥–∞']:
            apply_fixes(conn, 'companyproducts', columns_to_add, columns_to_remove)
        else:
            print("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    finally:
        conn.close()

if __name__ == '__main__':
    main() 
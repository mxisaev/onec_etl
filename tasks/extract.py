#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Power BI —á–µ—Ä–µ–∑ DAX –∑–∞–ø—Ä–æ—Å—ã
"""

import sys
import os
import json
from typing import Dict, List, Any
from datetime import datetime

# üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è utils.logger
# –î–ª—è –º–æ–¥—É–ª–µ–π tasks/services (—É—Ä–æ–≤–µ–Ω—å 2) –Ω—É–∂–µ–Ω –ø—É—Ç—å –∫ docker/dags/
dags_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
if dags_root not in sys.path:
    sys.path.insert(0, dags_root)

from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞
project_logs_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))), "logs")
os.makedirs(project_logs_dir, exist_ok=True)

# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –º–æ–¥—É–ª—è extract
logger.add(
    os.path.join(project_logs_dir, "extract_powerbi.log"),
    level="INFO",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {message}",
    rotation="1 day",
    retention="7 days",
    enqueue=True
)



def extract_powerbi_data(task_config: Dict[str, Any]) -> List[Dict[str, Any]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Power BI —á–µ—Ä–µ–∑ DAX –∑–∞–ø—Ä–æ—Å
    
    Args:
        task_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ —Å dataset_id, dax_query –∏ columns
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Power BI...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        dataset_id = task_config.get('dataset_id')
        dax_query_input = task_config.get('dax_query')  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –∫–ª—é—á–æ–º –∏–ª–∏ –≥–æ—Ç–æ–≤—ã–º DAX –∑–∞–ø—Ä–æ—Å–æ–º
        columns_mapping = task_config.get('columns', {})
        
        if not dataset_id or not dax_query_input:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω—ã dataset_id –∏–ª–∏ dax_query –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ: –∫–ª—é—á –∏–ª–∏ –≥–æ—Ç–æ–≤—ã–π DAX –∑–∞–ø—Ä–æ—Å
        actual_dax_query = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ DAX –∑–∞–ø—Ä–æ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å EVALUATE, DEFINE VAR –∏ —Ç.–¥.)
        if isinstance(dax_query_input, str) and any(dax_query_input.strip().upper().startswith(prefix) for prefix in ['EVALUATE', 'DEFINE VAR', 'SUMMARIZECOLUMNS']):
            # –≠—Ç–æ –≥–æ—Ç–æ–≤—ã–π DAX –∑–∞–ø—Ä–æ—Å
            actual_dax_query = dax_query_input
            logger.info("üîç –ü–æ–ª—É—á–µ–Ω –≥–æ—Ç–æ–≤—ã–π DAX –∑–∞–ø—Ä–æ—Å")
        else:
            # –≠—Ç–æ –∫–ª—é—á, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å DAX –∑–∞–ø—Ä–æ—Å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            from airflow.models import Variable
            dax_queries = Variable.get('dax_queries')
            dax_queries_dict = json.loads(dax_queries) if isinstance(dax_queries, str) else dax_queries
            
            if dax_query_input not in dax_queries_dict:
                raise ValueError(f"DAX –∑–∞–ø—Ä–æ—Å '{dax_query_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π dax_queries")
            
            actual_dax_query = dax_queries_dict[dax_query_input]['query']
            logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω DAX –∑–∞–ø—Ä–æ—Å –ø–æ –∫–ª—é—á—É '{dax_query_input}'")
        
        logger.info(f"üìä –í—ã–ø–æ–ª–Ω—è–µ–º DAX –∑–∞–ø—Ä–æ—Å –∫ dataset: {dataset_id}")
        # logger.info(f"üîç DAX –∑–∞–ø—Ä–æ—Å: {actual_dax_query[:100]}...")  # –£–±—Ä–∞–Ω–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π PowerBI –∫–ª–∏–µ–Ω—Ç (–∫–∞–∫ –≤ suppliers_etl)
        from oneC_etl.services.powerbi.client import PowerBIClient
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç (–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
        client = PowerBIClient()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º DAX –∑–∞–ø—Ä–æ—Å
        raw_data = client.execute_query(dataset_id, actual_dax_query)
        
        if not raw_data:
            logger.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Power BI")
            return []
        
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(raw_data)} —Å—Ç—Ä–æ–∫ –∏–∑ Power BI")
        
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –º–∞–ø–ø–∏–Ω–≥—É –∫–æ–ª–æ–Ω–æ–∫
        transformed_data = []
        for row in raw_data:
            transformed_row = {}
            
            for powerbi_column, target_column in columns_mapping.items():
                if powerbi_column in row:
                    transformed_row[target_column] = row[powerbi_column]
                else:
                    transformed_row[target_column] = None
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp
            transformed_row['extracted_at'] = datetime.utcnow().isoformat()
            transformed_data.append(transformed_row)
        
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã: {len(transformed_data)} —Å—Ç—Ä–æ–∫")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        if transformed_data:
            logger.info(f"üìã –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {transformed_data[0]}")
        
        return transformed_data
        
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Power BI: {str(e)}")
        raise

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    test_config = {
        'dataset_id': 'test-dataset-id',
        'dax_query': 'EVALUATE CompanyProducts',
        'columns': {
            'CompanyProducts[ID]': 'id',
            'CompanyProducts[Description]': 'description'
        }
    }
    
    try:
        result = extract_powerbi_data(test_config)
        print(f"–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω: –ø–æ–ª—É—á–µ–Ω–æ {len(result)} —Å—Ç—Ä–æ–∫")
    except Exception as e:
        print(f"–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        print("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Airflow (powerbi_tenant_id, powerbi_client_id, powerbi_client_secret, powerbi_workspace_id)")

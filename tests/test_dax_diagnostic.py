import requests
import sys
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Airflow
sys.path.append('/opt/airflow')

from airflow.models import Variable

def get_access_token():
    """–ü–æ–ª—É—á–∞–µ–º access token –¥–ª—è Power BI API"""
    tenant_id = Variable.get('powerbi_tenant_id')
    client_id = Variable.get('powerbi_client_id')
    client_secret = Variable.get('powerbi_client_secret')
    
    token_url = f'https://login.microsoftonline.com/{tenant_id}/oauth2/token'
    token_data = {
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret,
        'resource': 'https://analysis.windows.net/powerbi/api'
    }
    
    resp = requests.post(token_url, data=token_data)
    resp.raise_for_status()
    return resp.json()['access_token']

def test_dax_query(access_token, workspace_id, dataset_id, query, query_name):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º DAX –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    url = f'https://api.powerbi.com/v1.0/myorg/groups/{workspace_id}/datasets/{dataset_id}/executeQueries'
    
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    
    body = {
        "queries": [
            {
                "query": query
            }
        ]
    }
    
    print(f"\n=== –¢–µ—Å—Ç: {query_name} ===")
    print(f"–ó–∞–ø—Ä–æ—Å: {query}")
    
    try:
        resp = requests.post(url, headers=headers, json=body)
        
        if resp.status_code == 200:
            result = resp.json()
            print(f"‚úÖ –£–°–ü–ï–•! –°—Ç–∞—Ç—É—Å: {resp.status_code}")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result.get('results', []))} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
            if result.get('results') and result['results'][0].get('tables'):
                tables = result['results'][0]['tables']
                for i, table in enumerate(tables):
                    rows_count = len(table.get('rows', []))
                    print(f"–¢–∞–±–ª–∏—Ü–∞ {i+1}: {rows_count} —Å—Ç—Ä–æ–∫")
                    if table.get('rows'):
                        print(f"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {table['rows'][0]}")
                        print(f"–ö–æ–ª–æ–Ω–∫–∏: {[col.get('name') for col in table.get('columns', [])]}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞
                        print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
                        print(f"   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(result.get('results', []))}")
                        print(f"   ‚Ä¢ –¢–∞–±–ª–∏—Ü –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ 0: {len(tables)}")
                        print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ {i+1}: {rows_count}")
                        if 'columns' in table:
                            print(f"   ‚Ä¢ –ö–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ {i+1}: {len(table['columns'])}")
            else:
                print("‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü –∏–ª–∏ —Å—Ç—Ä–æ–∫")
                print(f"üìä –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞: {json.dumps(result, indent=2, ensure_ascii=False)}")
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê! –°—Ç–∞—Ç—É—Å: {resp.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {resp.text}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ–± –æ—à–∏–±–∫–µ
            try:
                error_details = resp.json()
                print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {json.dumps(error_details, indent=2, ensure_ascii=False)}")
            except:
                print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {resp.text}")
                
    except Exception as e:
        print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("=== –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ DAX –∑–∞–ø—Ä–æ—Å–æ–≤ Power BI –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ ===")
    
    workspace_id = Variable.get('powerbi_workspace_id')
    dataset_id = 'afb5ea40-5805-4b0b-a082-81ca7333be85'  # ID –¥–∞—Ç–∞—Å–µ—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        access_token = get_access_token()
        print("‚úì –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã DAX –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        test_queries = [
            {
                "name": "–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∑–∞–ø—Ä–æ—Å - —Ç–æ–ª—å–∫–æ EVALUATE",
                "query": "EVALUATE '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'"
            },
            {
                "name": "–° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º TOPN 10",
                "query": "EVALUATE TOPN(10, '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã', '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[id_1c])"
            },
            {
                "name": "–° –≤—ã–±–æ—Ä–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫",
                "query": "EVALUATE SELECTCOLUMNS('–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã', 'id_1c', '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[id_1c], '–ü–∞—Ä—Ç–Ω–µ—Ä.–£–¢11', '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[–ü–∞—Ä—Ç–Ω–µ—Ä.–£–¢11])"
            },
            {
                "name": "–° —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º",
                "query": "EVALUATE FILTER('–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã', '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[is_supplier] = TRUE)"
            },
            {
                "name": "–° SUMMARIZECOLUMNS (–ø—Ä–æ—Å—Ç–æ–π)",
                "query": "EVALUATE SUMMARIZECOLUMNS('–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[id_1c], '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[–ü–∞—Ä—Ç–Ω–µ—Ä.–£–¢11], '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[is_supplier])"
            },
            {
                "name": "–° SUMMARIZECOLUMNS –∏ TOPN",
                "query": "EVALUATE TOPN(10, SUMMARIZECOLUMNS('–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[id_1c], '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[–ü–∞—Ä—Ç–Ω–µ—Ä.–£–¢11], '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[is_supplier]), '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[id_1c])"
            },
            {
                "name": "–ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
                "query": """
EVALUATE
SUMMARIZECOLUMNS(
    '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[id_1c],
    '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[–ü–∞—Ä—Ç–Ω–µ—Ä.–£–¢11],
    '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[is_client],
    '–£–¢_–ü–∞—Ä—Ç–Ω–µ—Ä—ã'[is_supplier]
)
"""
            }
        ]
        
        for test_query in test_queries:
            test_dax_query(
                access_token, 
                workspace_id, 
                dataset_id, 
                test_query["query"], 
                test_query["name"]
            )
        
        # –ù–æ–≤—ã–π —Ç–µ—Å—Ç: DAX –∏–∑ Airflow Variable
        dax_queries = json.loads(Variable.get('dax_queries'))
        query = dax_queries['partners']['query']
        test_dax_query(
            access_token,
            workspace_id,
            dataset_id,
            query,
            "suppliers –∏–∑ Airflow Variable (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π DAX)"
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")

if __name__ == '__main__':
    main() 
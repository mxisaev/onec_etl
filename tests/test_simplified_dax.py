#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ DAX –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
"""

import sys
import os
from datetime import datetime

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_simplified_dax():
    try:
        from suppliers_etl.services.powerbi.client import PowerBIClient
        from suppliers_etl.dax_prepare.raw_queries import PARTNERS_QUERY
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π DAX –∑–∞–ø—Ä–æ—Å...")
        print(f"üìù –ó–∞–ø—Ä–æ—Å:\n{PARTNERS_QUERY}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç PowerBI
        client = PowerBIClient()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token = client._get_access_token()
        if not token:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
            return None
        
        print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º dataset_id –∏–∑ Airflow Variables
        from airflow.models import Variable
        datasets = Variable.get('datasets', deserialize_json=True)
        partners_dataset = datasets['partners']
        dataset_id = partners_dataset['id']
        
        print(f"üìä Dataset ID: {dataset_id}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        print("üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º DAX –∑–∞–ø—Ä–æ—Å...")
        result = client.execute_query(dataset_id, PARTNERS_QUERY)
        
        print(f"‚úÖ –£–°–ü–ï–•! –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} —Å—Ç—Ä–æ–∫")
        if result:
            print(f"üìã –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {result[0]}")
            print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {list(result[0].keys())}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ DAX –∑–∞–ø—Ä–æ—Å–∞...")
    result = test_simplified_dax()
    if result:
        print(f"üéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Å—Ç—Ä–æ–∫")
    else:
        print("ÔøΩÔøΩ –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
